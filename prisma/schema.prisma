generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url  = env("DATABASE_URL")
}

 
model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?  @unique
  hashedPassword String?
  emailVerified DateTime?
  image         String?

  // Champs existants
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Nouveaux champs ajout√©s
  eloBullet       Int?
  eloBlitz        Int?
  eloRapid        Int?
  chesscomUsername String?
  
  // Champs relatifs aux sessions
  sessions       Session[]

    documents       Document[]
}

 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
model Document {
  id            String   @id @default(cuid()) @map("_id") @db.ObjectId
  title         String
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isArchived    Boolean
  parentDocumentId String? @db.ObjectId
  parentDocument   Document? @relation("ParentDocument", fields: [parentDocumentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children      Document[] @relation("ParentDocument")
  content       String?
  coverImage    String?
  icon          String?
  isPublished   Boolean

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId], name: "by_user")
  @@index([userId, parentDocumentId], name: "by_user_parent")
}
